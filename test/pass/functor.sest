module Functor = struct

  val n() = 42

  signature S = sig
    type t :: o
    val zero : fun() -> t
  end

  module F = fun(X : S) -> fun(Y : S) -> struct
    val f(x : X.t) : X.t = x
    val g(y : Y.t) : Y.t = y
    val m() = n()
    val zeroes() = {X.zero(), Y.zero()}
  end

  module Int = struct
    type t = int
    val zero() = 0
  end

  module Sub = struct
    module Bool = struct
      type t = bool
      val zero() = false
    end
  end

  module G = F(Int)
  module B = Sub.Bool
  module M = G(B)

  val main(args) =
    print_debug(M.zeroes())

end
