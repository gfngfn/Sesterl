/* This is just a conceptual example and cannot be compiled. */

type option<$a> = None | Some($a)
type result<$a, $b> = Ok($a) | Error($b)
type timed<$a> = Finished($a) | Timeout

module Counter = struct

  /* An abstract type for associating responses with requests. */
  type get

  /* A type for user-defined errors. */
  type error = unit

  /*  `GenServer.Make` is a functor of the following signature:

      ```
      (forall state, init_arg, error, cast_message, request, response) fun(sig
        type state :: 0
        type init_arg :: 0
        type error :: 0
        val init : fun(init_arg) -> result<state, error>
        type cast_message :: 0
        type request :: 1
        type response :: 1
        val handle_cast : fun(cast_message, state) -> result<state, error>
        val handle_call<$a> : fun(request<$a>, GenServer.session<$a>, state) -> result<(state, response<$a>), error>
      end) -> (exists proc) (sig
        type proc :: 0
        val start_link<$s> : fun(init_arg) -> [$s]result<proc, error>
        val cast<$s> : fun(proc, cast_message) -> [$s]unit
        val call<$s, $a> : fun(proc, request<$a>) -> [$s]timed<result<response<$a>, error>>
      end)
      ```

      - `init`, `handle_cast`, and `handle_call`: callback functions required by `gen_server`.
      - `proc`: The type for abstracted PIDs of processes generated by `gen_server` callback modules.
      - `cast`: `cast(proc, msg)` corresponds to `gen_server:cast(?MODULE, proc, msg)`.
      - `call`: `call(proc, msg)` corresponds to `gen_server:call(?MODULE, proc, msg)`.
  */
  include GenServer.Make(struct

    type state = int

    type init_arg = int

    let init(n : int) =
      Ok(n)

    type cast_message =
      | Increment
      | Decrement
      | Reset(int)

    /* A GADT for request messages. */
    type request :: 1 =
      | Get : request<get>

    /* A GADT for response messages. */
    type response :: 1 =
      | Got : request<get>

    let handle_cast(msg : cast_message, n : state) : result<state, error> =
      case msg of
      | Increment -> Ok(n + 1)
      | Decrement -> Ok(n - 1)
      | Reset(m)  -> Ok(m)
      end

    let handle_call<$a>(msg : request<$a>, ses : GenServer.session<$a>, n : state) =
      case msg of
      | Get -> Ok((n, Got(n)))
      end
  end)

  let increment(pid : proc) : [_]unit = cast(pid, Increment)
  let decrement(pid : proc) : [_]unit = cast(pid, Decrement)
  let reset(pid : proc, m : int) : [_]unit = cast(pid, Reset(m))

  let get(pid : proc) =
    do res <- call(pid, Get) in
    let v =
      case res of
      | Finished(Ok(Got(n))) -> Finished(Ok(n))
      | Finished(Error(e))   -> Finished(Error(e))
      | Timeout              -> Timeout
      end
    in
    return(v)

end :> sig
  type proc :: 0
  type error = unit
  val start_link<$s> : fun(int) -> [$s]result<proc, error>
  val increment<$s> : fun(proc) -> [$s]unit
  val decrement<$s> : fun(proc) -> [$s]unit
  val get<$s> : fun(proc) -> [$s]result<int, error>
end
