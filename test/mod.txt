
type option<$a> =
  | None
  | Some($a)

signature Ord = sig
  type s:: 0
  val compare: fun(s, s) -> int
end

module Map = fun(Elem: Ord) ->
  struct
    type elem = Elem.s
    type t<$a> = list<(elem, $a)>
    letrec find<$b>(x: elem, assoc: t<$b>): option<$b> =
      case assoc of
      | [] ->
          None

      | (k, v) :: tail ->
          if Elem.compare(k, x) == 0 then
            Some(v)
          else
            find(x, tail)
      end
  end
