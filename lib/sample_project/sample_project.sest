module SampleProject = struct

  module Server :> sig
    type proc
    val start_link<$a> : fun({ number : int, name : binary }) -> [$a]option<proc>
    val stop<$a> : fun(proc) -> [$a]unit
    val set_number<$a> : fun(proc, int) -> [$a]unit
    val get_number<$a> : fun(proc, ?timeout int) -> [$a]int
  end = struct

    type request_impl =
      | GetNumber
      | GetName

    type response_impl =
      | Number(int)
      | Name(binary)

    type cast_message_impl =
      | SetNumber(int)

    module Callback = struct

      type request = request_impl
      type response = response_impl
      type cast_message = cast_message_impl
      type state = { number : int,  name : binary }
      type init_arg = state

      let init(state) =
        let _ = print_debug(("init", state)) in
        Some(state)

      let handle_call(req, pid, state) =
       let _ = print_debug(("handle_call", req)) in
        case req of
        | GetNumber -> (Number(state.number), state)
        | GetName   -> (Name(state.name), state)
        end

      let handle_cast(msg, state) =
        let _ = print_debug(("handle_cast", msg)) in
        case msg of
        | SetNumber(m) -> { number = m, name = state.name }
        end

      let terminate(state) =
        let _ = print_debug("terminate") in
        ()

    end

    include Stdlib.GenServer.Make(Callback)

    let set_number<$a>(pid : proc, m : int) : [$a]unit =
      cast(pid, SetNumber(m))

    let get_number<$a>(pid : proc, ?timeout t_opt) : [$a]int =
      do res <-
        case t_opt of
        | None    -> call(pid, GetNumber)
        | Some(t) -> call(pid, GetNumber, ?timeout t)
        end
      in
      case res of
      | Number(n) -> return(n)
      end

  end

  module Main = struct

    let async_increment(pid) =
      do n <- Server.get_number(pid) in
      do Server.set_number(pid, n + 1) in
      return(n + 1)

    letrec loop(t, pid) =
      if t <= 0 then
        Server.stop(pid)
      else
        do n <- async_increment(pid) in
        let _ = print_debug((t, n)) in
        loop(t - 1, pid)

    let main() =
      do pid_opt <- Server.start_link({ number = 57, name = "Sample Store"}) in
      case pid_opt of
      | None ->
          let _ = print_debug("failed to start a process") in
          return(())

      | Some(pid) ->
          do x <- Server.get_number(pid, ?timeout 1000) in
          let _ = print_debug(("first get", x)) in
          do Server.set_number(pid, 42) in
          loop(10, pid)
      end
  end

end
