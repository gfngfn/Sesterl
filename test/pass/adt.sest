module Adt = struct

  val rec foldl(f, i, l) =
    case l of
    | []      -> i
    | x :: xs -> foldl(f, f(i, x), xs)
    end

  val reverse_map(f, xs) =
    foldl(fun(acc, x) -> f(x) :: acc, [], xs)

  val sum(ns) =
    foldl(fun(m, n) -> m + n, 0, ns)

  type tree<$a> =
    | Node($a, list<tree<$a>>)

  val leaf(x) =
    Node(x, [])

  val rec tree_size(tr) =
    let Node(_, children) = tr in
    case children of
    | []     -> 1
    | _ :: _ -> 1 + sum(reverse_map(tree_size, children))
    end

  type oddlist<$a> =
    | OddCons($a, evenlist<$a>)

  and evenlist<$b> =
    | Nil
    | EvenCons($b, oddlist<$b>)

  val main(args) =
    let tr =
      Node(3, [
        Node(1, [
          leaf(4),
          Node(1, [
            leaf(5),
            leaf(9),
          ]),
          leaf(2),
        ])
      ])
    in
    let size = tree_size(tr) in
    let t = OddCons(3, Nil()) in
    print_debug({size, t})

end
