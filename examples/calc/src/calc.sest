module Calc :> sig
  val fact : fun(int) -> int
  val sum : fun(list<int>) -> int
  val id<$a> : fun($a) -> $a
  val first<$a, $b> : fun({$a, $b}) -> $a
  val have_same_length<$a, $b> : fun(list<$a>, list<$b>) -> bool
end = struct
  open Stdlib

  val fact(n) =
    let rec aux(acc, n) =
      if n <= 0 then acc else aux(n * acc, n - 1)
    in
    aux(1, n)

  val sum(ns) =
    List.foldl(
      fun(acc, n) -> acc + n end,
      0,
      ns)

  val id(x) = x

  val first({x, _}) = x

  val have_same_length<$a, $b>(xs : list<$a>, ys : list<$b>) : bool =
    List.length(xs) == List.length(ys)


end
