
module ModSeq = struct

  type option<$a> =
    | None
    | Some($a)

  signature Decomposable = sig
    type s :: 1
    val decompose<$a> : fun(s<$a>) -> option<($a, s<$a>)>
  end

  module Seq = fun(D : Decomposable) ->
    struct
      type t<$a> = D.s<$a>
      let to_reversed_list<$a>(xs : t<$a>) : list<$a> =
        letrec aux(acc : list<$a>, xs : t<$a>) =
          case D.decompose(xs) of
          | None            -> acc
          | Some((x, tail)) -> aux(x :: acc, tail)
          end
        in
        aux([], xs)
    end

  module ListD = struct
    type s<$a> = list<$a>
    let decompose(xs) =
      case xs of
      | []        -> None
      | x :: tail -> Some((x, tail))
      end
  end

  module ListSeq = Seq(ListD)

  let main() =
    let ans = ListSeq.to_reversed_list([3, 1, 4]) in
    print_debug(ans)

end
