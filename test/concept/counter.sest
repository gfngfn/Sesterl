/* This is just a conceptual example and cannot be compiled. */

type option<$a> = None | Some($a)
type result<$a, $b> = Ok($a) | Error($b)

module Counter = struct

  /* Abstract types for associating responses with requests. */
  type get_number
  type get_name

  /*  `GenServer.Make` is a functor of the following signature:

      ```
      (forall
        state :: 0,
        init_arg :: 0,
        init_error :: 0,
        cast_message :: 0,
        request :: 1,
        response :: 1,
        stop_reason :: 0
      ) (fun(sig
        type state :: 0
        type init_arg :: 0
        type init_error :: 0
        val init : fun(init_arg) -> result<state, init_error>
        type cast_message :: 0
        type request :: 1
        type response :: 1
        val handle_cast : fun(cast_message, state) -> result<state, stop_reason>
        val handle_call<$a> : fun(request<$a>, GenServer.session<$a>, state) -> result<(state, response<$a>), stop_reason>
      end) -> (exists proc :: 0) (sig
        type proc :: 0
        val start_link<$s> : fun(init_arg) -> [$s]result<proc, error>
        val cast<$s> : fun(proc, cast_message) -> [$s]unit
        val call<$s, $a> : fun(proc, request<$a>, time) -> [$s]result<response<$a>, error>
      end))
      ```

      - `init`, `handle_cast`, and `handle_call`: callback functions required by `gen_server`.
      - `proc`: The type for abstracted PIDs of processes generated by `gen_server` callback modules.
      - `cast`: `cast(proc, msg)` corresponds to `gen_server:cast(?MODULE, proc, msg)`.
      - `call`: `call(proc, msg, timeout)` corresponds to `gen_server:call(?MODULE, proc, msg, timeout)`.
  */
  include GenServer.Make(struct

    type state = { number : int, name : string }

    type init_arg = string

    let init(name : init_arg) =
      Ok({ number = 0, name = name })

    type cast_message =
      | Increment
      | Decrement
      | ResetNumber(int)

    /* A GADT for request messages. */
    type request :: 1 =
      | GetNumber : request<get_number>
      | GetName   : request<get_name>

    /* A GADT for response messages. */
    type response :: 1 =
      | Number(int)  : response<get_number>
      | Name(string) : response<get_name>

    let handle_cast(msg : cast_message, state : state) : result<state, error> =
      case msg of
      | Increment      -> Ok({ state with number = state.number + 1 })
      | Decrement      -> Ok({ state with number = state.number - 1 })
      | ResetNumber(m) -> Ok({ state with number = m })
      end

    let handle_call<$a>(msg : request<$a>, ses : GenServer.session<$a>, state : state) =
      case msg of
      | GetNumber -> Ok((state, Number(state.number)))
      | GetName   -> Ok((state, Number(state.name)))
      end
  end)

  let increment(pid : proc) : [_]unit = cast(pid, Increment)
  let decrement(pid : proc) : [_]unit = cast(pid, Decrement)
  let reset(pid : proc, m : int) : [_]unit = cast(pid, Reset(m))

  let get_number(pid : proc, ?timeout = 5000s : time) : [_]result<int, GenServer.error> =
    do r : result<response<get_number>, GenServer.error> <- call(pid, GetNumber, timeout) in
    let v =
      r |> Result.bind(fun(res) ->
        case res of Number(n) -> Ok(n) end
      end)
    in
    return(v)

  let get_name(pid : proc) : [_]result<string, GenServer.error> =
    do r <- call(pid, GetName) in
    let v =
      r |> Result.bind(fun(res) ->
        case res of Name(name) -> Ok(name) end
      end)
    in
    return(v)

end :> sig
  type proc :: 0
  val start_link<$s> : fun(int) -> [$s]result<proc, GenServer.error>
  val increment<$s> : fun(proc) -> [$s]unit
  val decrement<$s> : fun(proc) -> [$s]unit
  val get_number<$s> : fun(proc) -> [$s]result<int, GenServer.error>
  val get_name<$s> : fun(proc) -> [$s]result<string, GenServer.error>
end
