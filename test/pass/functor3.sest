module Functor3 = struct

  signature S = sig
    type t :: o
    val zero : fun() -> t
  end

  signature T = sig
    module M : S
    module N : S
  end

  module F = fun(X : T) -> struct
    module P = X.M
    module Q = X.N
    val f(x : P.t,) : P.t = x  /* inserting a comma is a temporary dirty hack for parsing */
    val g(y : Q.t,) : Q.t = y
    val zeroes() = {P.zero(), Q.zero()}
  end

  module Int = struct
    type t = int
    val zero() = 0
  end

  module Bool = struct
    type t = bool
    val zero() = false
  end

  module Pair = struct
    module M = Int
    module N = Bool
  end

  module M = F(Pair)

end
