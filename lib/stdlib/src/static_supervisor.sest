import SupervisorCommon
import ServerUtil

module StaticSupervisor = struct

  include SupervisorCommon

  type child_proc = ChildProcDummy

  val make_child_proc<$a, $b, $c> : fun(fun() -> [$b]option<pid<$a>>) -> [$c]child_proc = external 1 ```
    make_child_proc(PidOptF) ->
        case PidOptF() of
            {some, Pid} -> {ok, Pid};
            none        -> error
        end.
  ```

  type child_spec<$msg, $id> = {
    id       : $id,
    start    : frozen<unit, $msg, child_proc>,
    restart  : restart,
    shutdown : shutdown,
    typ      : worker,
  }

  val make_child_spec<$msg, $id>(
    -id       id : $id,
    -start    start : frozen<unit, $msg, child_proc>,
    ?restart  restart = Permanent,
    ?shutdown shutdown_opt,
    ?type     typ = Worker,
  ) : child_spec<$msg, $id> =
    let shutdown =
      case {shutdown_opt, typ} of
      | {Some(shutdown), _} -> shutdown
      | {None, Worker}      -> Timeout(5000)
      | {None, Supervisor}  -> Infinity
      end
    in
    {
      id       = id,
      start    = start,
      restart  = restart,
      shutdown = shutdown,
      typ      = typ,
    }

  type strategy = OneForAll | OneForOne | RestForOne

  type sup_flags = {
    strategy  : strategy,
    intensity : int,
    period    : int,
  }

  val make_sup_flags(
    ?strategy  strategy  = OneForOne,
    ?intensity intensity = 1,
    ?period    period    = 5,
  ) : sup_flags =
    { strategy = strategy, intensity = intensity, period = period }

  type initialized<$msg, $id> = option<{sup_flags, list<child_spec<$msg, $id>>}>

  val init_ok<$msg, $id>(sup_flags : sup_flags, child_specs : list<child_spec<$msg, $id>>) : [$msg]initialized<$msg, $id> = act
    return(Some({sup_flags, child_specs}))

  val init_fail() = act
    return(None)

  signature Behaviour = sig
    type child_id :: o
    type init_arg :: o
    type info :: o
    val init : fun(init_arg) -> [info]initialized<info, child_id>
  end

  module Make = fun(Callback : Behaviour) -> struct

    type proc = ProcDummy

    val init_impl(args) = act
      Callback.init(args)

    val init<$a> : $a = external 1 ```
      init(Args) ->
          case init_impl(Args) of
              none ->
                  ignore;

              {some, {SupFlags, ChildSpecsImpl}} ->
                  ChildSpecs =
                      lists:map(
                          fun(ChildSpecImpl) ->
                              #{
                                  id       := ChildId,
                                  start    := StartFunc,
                                  restart  := Restart,
                                  shutdown := ShutdownImpl,
                                  typ      := Worker
                              } = ChildSpecImpl,
                              Shutdown =
                                  case ShutdownImpl of
                                      brutal_kill  -> brutal_kill;
                                      {timeout, N} -> max(N, 0);
                                      infinity     -> infinity
                                  end,
                              #{
                                  id       => ChildId,
                                  start    => StartFunc,
                                  restart  => Restart,
                                  shutdown => Shutdown,
                                  type     => Worker
                              }
                          end,
                          ChildSpecsImpl),
                  {ok, {SupFlags, ChildSpecs}}
          end.
    ```

    val as_pid : fun(proc) -> pid<Callback.info> = external 1 ```
      as_pid(Pid) -> Pid.
    ```

    val from_pid : fun(pid<Callback.info>) -> proc = external 1 ```
      from_pid(Pid) -> Pid.
    ```

    val start_link<$a> : fun(Callback.init_arg) -> [$a]option<proc> = external 1 ```
      start_link(InitArg) ->
          % io:format("debug L('o' )J (~p) St start_link (pre):~n  ~p~n", [?MODULE, InitArg]),
          % io:format("debug L('o' )J (~p) St start_link (arg):~n  ~p~n", [?MODULE, InitArg]),
          StartRet = supervisor:start_link(?MODULE, InitArg),
          % io:format("debug L('o' )J (~p) St start_link (ret):~n  ~p~n", [?MODULE, StartRet]),
          case StartRet of
              {ok, Pid} -> {some, Pid};
              _         -> none
          end.
    ```

    val start_link_name<$a> : fun(Callback.init_arg, -name ServerUtil.name) -> [$a]option<{bool, proc}> = external 2 ```
      start_link_name(InitArg, NameImpl) ->
          % io:format("debug L('o' )J (~p) St start_link_name (pre):~n  ~p~n", [?MODULE, InitArg]),
          Name =
              case NameImpl of
                  {local, Bin}  -> {local, erlang:binary_to_atom(Bin, utf8)};
                  {global, Bin} -> {global, erlang:binary_to_atom(Bin, utf8)}
              end,
          % io:format("debug L('o' )J (~p) St start_link_name (arg):~n  ~p~n", [?MODULE, InitArg]),
          StartRet = supervisor:start_link(Name, ?MODULE, InitArg),
          Ret =
          case StartRet of
              {ok, SupPid} when is_pid(SupPid)   -> {some, {true, SupPid}};
              {error, {already_started, SupPid}} -> {some, {false, SupPid}};
              _                                  -> none
          end,
          % io:format("debug L('o' )J (~p) St start_link_name (ret):~n  ~p~n", [?MODULE, StartRet]),
          Ret.
    ```

    val where_is<$a> : fun(binary) -> [$a]option<proc> = external 1 ```
      where_is(NameBin) ->
          NameAtom = erlang:binary_to_atom(NameBin, utf8),
          case erlang:whereis(NameAtom) of
              Pid when is_pid(Pid) -> {some, Pid};
              _                    -> none
          end.
    ```

  end

end
