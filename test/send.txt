
let reverse_list(xs) =
  letrec aux(rev, xs) =
    case xs of
    | []        -> rev
    | x :: tail -> aux(x :: rev, tail)
    end
  in
  aux([], xs)


letrec wait_all(n) =
  if n <= 0 then
    return(())
  else
    receive
    | (from, x) ->
        let u = print_debug((from, x, n)) in
        wait_all(n - 1)
    end


letrec aux(acc, n) =
  if n <= 0 then
    return(reverse_list(acc))
  else
    do parent <- self in
    do pid <-
      spawn(
        do me <- self in
        send(parent, (me, n))
      )
    in
    aux(pid :: acc, n - 1)


let main() =
  let m = 10 in
  do pids <- aux([], m) in
  let u = print_debug(pids) in
  wait_all(m)
