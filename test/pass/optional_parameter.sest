module OptionalParameter = struct

  val pure_succ(n) = n + 1

  val succ(n : int, ?diff dopt : option<int>) =
    case dopt of
    | None    -> pure_succ(n)
    | Some(d) -> n + d
    end

  val succ_concise(n : int, ?diff d : int = 1) =
    n + d

  val make_pair<$a>(x : $a, ?other y : $a = x) =
    {x, y}

  val f(g) =
    {g(36), g(36, ?diff 64)}

  val main(_) =
    let ans1 = {succ(42), succ(42, ?diff 15), f(succ)} in
    let ans2 = {succ_concise(42), succ_concise(42, ?diff 15), f(succ_concise)} in
    let ans3 = {make_pair("first"), make_pair("first", ?other "second")} in
    print_debug({ans1, ans2, ans3})

end
