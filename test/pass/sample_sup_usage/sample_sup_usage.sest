module SampleSupUsage = struct
  open Stdlib

  module G = GenServer
  module S = Supervisor.Static

  module Sup :> sig
    type proc
    type error = S.start_link_error
    val start_link<$a> : fun(unit) -> [$a]result<proc, error>
  end = struct

    type error = S.start_link_error

    module Child1 = struct

      module Callback = struct
        type init_arg = int
        type request =
          | Get
        type response =
          | Got(int)
        type cast_message =
          | Set(int)
        type info = unit
        type global = unit
        type stop_reason = RawValue.t
        type state = int

        val init(n) = act
          G.init_ok(n)

        val handle_call(request, from, n) = act
          case request of
          | Get -> G.reply(Got(n), n)
          end

        val handle_cast(msg, n) = act
          case msg of
          | Set(m) -> G.no_reply(m)
          end

        val handle_info(info, n) = act
          G.no_reply(n)

        val terminate(n) = act
          return({})
      end

      include G.Make(Callback)
    end

    module SupCallback = struct

      type child_id = int
      type init_arg = unit
      type info = unit
      type global = unit

      val start_child1(n) = act
        S.make_child_proc(fun() -> act
          do res <- Child1.start_link(n) in
          return(Result.map(Child1.as_pid, res))
        end)

      val init(init_arg) = act
        let sup_flags =
          S.make_sup_flags(
            ?strategy  S.OneForOne,
            ?intensity 1,
            ?period    5,
          )
        in
        let child_specs =
          [
            S.make_child_spec(
              -id    1,
              -start (freeze start_child1(42)),
            )
          ]
        in
        S.init_ok(sup_flags, child_specs)
    end

    include S.Make(SupCallback)
  end

  val main(args) = act
    do res <- Sup.start_link({}) in
    case res of
    | Error(reason) ->
        let _ = print_debug({"did not start", reason}) in
        return({})

    | Ok(proc) ->
        let _ = print_debug("ok") in
        return({})
    end

end
