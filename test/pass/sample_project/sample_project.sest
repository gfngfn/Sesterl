module SampleProject = struct
  open Stdlib

  module Server :> sig
    type proc
    type error = GenServer.start_link_error
    val start_link<$a> : fun({number : int, name : binary}) -> [$a]result<proc, error>
    val stop<$a> : fun(proc) -> [$a]unit
    val set_number<$a> : fun(proc, int) -> [$a]unit
    val get_number<$a> : fun(proc, ?timeout int) -> [$a]int
  end = struct

    type error = GenServer.start_link_error

    type request_impl =
      | GetNumber
      | GetName

    type response_impl =
      | Number(int)
      | Name(binary)

    type cast_message_impl =
      | SetNumber(int)

    module Callback = struct

      type request = request_impl
      type response = response_impl
      type cast_message = cast_message_impl
      type state = { number : int,  name : binary }
      type init_arg = state
      type global = unit

      type info =
        | InfoDummy

      val init(state) = act
        let _ = print_debug({"init", state}) in
        GenServer.init_ok(state)

      val handle_call(req, _, state) = act
        let _ = print_debug({"handle_call", req, state}) in
        case req of
        | GetNumber -> GenServer.reply(Number(state.number), state)
        | GetName   -> GenServer.reply(Name(state.name), state)
        end

      val handle_cast(msg, state) = act
        let _ = print_debug({"handle_cast", msg, state}) in
        case msg of
        | SetNumber(m) -> GenServer.no_reply({ number = m, name = state.name })
        end

      val handle_timeout(state) = act
        let _ = print_debug({"timeout", state}) in
        GenServer.no_reply(state)

      val handle_down(mref, pid, reason, state) = act
        let _ = print_debug({"down", mref, pid, reason, state}) in
        GenServer.no_reply(state)

      val handle_info(info, state) = act
        let _ = print_debug({"info", info, state}) in
        GenServer.no_reply(state)

      val terminate(state) = act
        let _ = print_debug({"terminate", state}) in
        return({})

    end

    include GenServer.Make(Callback)

    val set_number<$a>(pid : proc, m : int) : [$a]unit = act
      cast(pid, SetNumber(m))

    val get_number<$a>(pid : proc, ?timeout t_opt) : [$a]int = act
      do res <-
        case t_opt of
        | None    -> call(pid, GetNumber)
        | Some(t) -> call(pid, GetNumber, ?timeout t)
        end
      in
      case res of
      | Ok(Number(n)) -> return(n)
      end

  end

  module Main = struct

    val async_increment(pid) = act
      do n <- Server.get_number(pid) in
      do _ <- Server.set_number(pid, n + 1) in
      return(n + 1)

    val rec loop(t, pid) = act
      if t <= 0 then
        Server.stop(pid)
      else
        do n <- async_increment(pid) in
        let _ = print_debug({t, n}) in
        loop(t - 1, pid)

    val main() = act
      do res <- Server.start_link({number = 57, name = "Sample Store"}) in
      case res of
      | Error(reason) ->
          let _ = print_debug({"failed to start a process", reason}) in
          return({})

      | Ok(pid) ->
          do x <- Server.get_number(pid, ?timeout 1000) in
          let _ = print_debug({"first get", x}) in
          do _ <- Server.set_number(pid, 42) in
          loop(10, pid)
      end
  end

  val main(_) = act
    Main.main()

end
