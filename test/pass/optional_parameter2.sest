module OptionalParameter2 = struct

  module Impl = struct
    val f1(g) = {g(42), g(42, ?foo 57)}
    val f2(g) = f1(g)
    val f3(g) = f1(g)
  end

  include Impl :> sig
    val f1<$a, ?$r :: (?foo int, ?bar binary)> : fun(fun(int, ?$r) -> $a) -> {$a, $a}
    val f2<$a, ?$r :: (?foo int)> : fun(fun(int, ?$r) -> $a) -> {$a, $a}
    val f3<$a> : fun(fun(int, ?foo int, ?baz bool) -> $a) -> {$a, $a}
  end

  val main(args) =
    let ans1 =
      f2(fun(n, ?foo topt) ->
        case topt of
        | None    -> n * 2
        | Some(t) -> n * t
        end
      )
    in
    let ans2 =
      f2(fun(n, ?foo t = 2) ->
        n * t
      )
    in
    print_debug({ans1, ans2})

end
