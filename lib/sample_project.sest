require "./gen_server.sest"

module SampleProject = struct

  module Server = struct

    type request_impl =
      | GetNumber
      | GetName

    type response_impl =
      | Number(int)
      | Name(binary)

    type cast_message_impl =
      | SetNumber(int)

    module C = struct

      type init_arg =
        (int, binary)

      type request = request_impl
      type response = response_impl
      type cast_message = cast_message_impl

      type state =
        (int, binary)

      let init(state) =
        let _ = print_debug("init") in
        let _ = print_debug(state) in
        state

      let handle_call(req, pid, state) =
        let (n, s) = state in
        case req of
        | GetNumber -> (Number(n), state)
        | GetName   -> (Name(s), state)
        end

     let handle_cast(msg, state) =
       let _ = print_debug(("handle_cast, received:", msg)) in
       let (_, s) = state in
       case msg of
       | SetNumber(m) -> (m, s)
       end

    end

    include SesterlStdlib.GenServer.Make(C)

    let set_number<$a>(pid : proc, m : int) : [$a]unit =
      cast(pid, SetNumber(m))

    let get_number<$a>(pid : proc) : [$a]int =
      do res <- call(pid, GetNumber) in
      case res of
      | Number(n) -> return(n)
      | _         -> return(0)
      end

  end

  module Main = struct

    letrec loop(t, pid) =
      if t <= 0 then
        return(())
      else
        do n <- Server.get_number(pid) in
        let _ = print_debug((t, n)) in
        loop(t - 1, pid)

    let main() =
      do pid <- Server.start_link((57, "Sample Store")) in
      do x <- Server.get_number(pid) in
      let _ = print_debug(("first get", x)) in
      do Server.set_number(pid, 42) in
      loop(10, pid)

  end

end
