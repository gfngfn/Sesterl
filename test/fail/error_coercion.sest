module ErrorCoercion = struct
  module Sub = struct
    module Impl = struct
      val rec aux(acc, n, x) =
        if n <= 0 then acc else
          aux(x * acc, n - 1, x)

      val power(n, x) =
        aux(1, n, x)
    end

    include (Impl :> sig
      val power : fun(int, int) -> int
    end)
  end

  val main() =
    Sub.aux(1, 4, 3)

end
