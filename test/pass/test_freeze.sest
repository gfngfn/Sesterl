module TestFreeze = struct

  module Sub = struct
    val add_pure(x, y) =
      x + y

    val add(x, y) = act
      return(add_pure(x, y))

    val rec foldl_pure(f, i, l) =
      case l of
      | []      -> i
      | x :: xs -> foldl_pure(f, f(i, x), xs)
      end

    val foldl(f, i, l) = act
      return(foldl_pure(f, i, l))
  end

  type info = unit

  val negate(n) = act
    return(0 - n)

  val partial(x) : frozen<{int}, info, int> =
    freeze Sub.add(x, _)

  val full(y) : frozen<unit, info, int> =
    let p = partial(42) in
    freeze (p) with (y)

  val partial1() : frozen<{int, list<int>}, info, int> =
    freeze Sub.foldl(Sub.add_pure, _, _)

  val partial2() : frozen<{list<int>}, info, int> =
    freeze (partial1()) with (0, _)

  val impl() : list<frozen<unit, info, int>> =
    [
      freeze Sub.add(42, 57),
      freeze negate(100),
      freeze (partial2()) with ([3, 1, 4, 5, 9, 2]),
    ]

  val main<$a> : fun($a) -> unit = external 1 ```
main(_) ->
    List = impl(),
    lists:foreach(
        fun({M, F, Args}) ->
            Result = apply(M, F, Args),
            io:format("~p~n", [Result])
        end,
        List).
  ```
end
